;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 20/10/2025 20:45:31
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x0000000402FC  	GOTO	_main
0x0004	0x000000  	0
0x0006	0x000000  	0
0x0008	0x000000  	0
0x000A	0x000000  	0
0x000C	0x000000  	0
0x000E	0x000000  	0
0x0010	0x000000  	0
0x0012	0x000000  	0
0x0014	0x000000  	0
0x0016	0x000000  	0
0x0018	0x000000  	0
0x001A	0x000000  	0
0x001C	0x000000  	0
0x001E	0x000000  	0
0x0020	0x0002D8  	728
0x0022	0x000000  	0
0x0024	0x000000  	0
0x0026	0x000000  	0
0x0028	0x000000  	0
0x002A	0x000338  	824
0x002C	0x000000  	0
0x002E	0x000000  	0
0x0030	0x000000  	0
0x0032	0x000000  	0
0x0034	0x000000  	0
0x0036	0x000000  	0
0x0038	0x000000  	0
0x003A	0x000000  	0
0x003C	0x000000  	0
0x003E	0x000000  	0
0x0040	0x000000  	0
0x0042	0x000000  	0
0x0044	0x000000  	0
0x0046	0x000000  	0
0x0048	0x000000  	0
0x004A	0x000000  	0
0x004C	0x000000  	0
0x004E	0x000000  	0
0x0050	0x000000  	0
0x0052	0x000000  	0
0x0054	0x000000  	0
0x0056	0x000000  	0
0x0058	0x000000  	0
0x005A	0x000000  	0
0x005C	0x000000  	0
0x005E	0x000000  	0
0x0060	0x000000  	0
0x0062	0x000000  	0
0x0064	0x000000  	0
0x0066	0x000000  	0
0x0068	0x000000  	0
0x006A	0x000000  	0
0x006C	0x000000  	0
0x006E	0x000000  	0
0x0070	0x000000  	0
0x0072	0x000000  	0
0x0074	0x000000  	0
0x0076	0x000000  	0
0x0078	0x000000  	0
0x007A	0x000000  	0
0x007C	0x000000  	0
0x007E	0x000000  	0
0x0080	0x000000  	0
0x0082	0x000000  	0
0x0084	0x000000  	0
0x0086	0x000000  	0
0x0088	0x000000  	0
0x008A	0x000000  	0
0x008C	0x000000  	0
0x008E	0x000000  	0
0x0090	0x000000  	0
0x0092	0x000000  	0
0x0094	0x000000  	0
0x0096	0x000000  	0
0x0098	0x000000  	0
0x009A	0x000000  	0
0x009C	0x000000  	0
0x009E	0x000000  	0
0x00A0	0x000000  	0
0x00A2	0x000000  	0
0x00A4	0x000000  	0
0x00A6	0x000000  	0
0x00A8	0x000000  	0
0x00AA	0x000000  	0
0x00AC	0x000000  	0
0x00AE	0x000000  	0
0x00B0	0x000000  	0
0x00B2	0x000000  	0
0x00B4	0x000000  	0
0x00B6	0x000000  	0
0x00B8	0x000000  	0
0x00BA	0x000000  	0
0x00BC	0x000000  	0
0x00BE	0x000000  	0
0x00C0	0x000000  	0
0x00C2	0x000000  	0
0x00C4	0x000000  	0
0x00C6	0x000000  	0
0x00C8	0x000000  	0
0x00CA	0x000000  	0
0x00CC	0x000000  	0
0x00CE	0x000000  	0
0x00D0	0x000000  	0
0x00D2	0x000000  	0
0x00D4	0x000000  	0
0x00D6	0x000000  	0
0x00D8	0x000000  	0
0x00DA	0x000000  	0
0x00DC	0x000000  	0
0x00DE	0x000000  	0
0x00E0	0x000000  	0
0x00E2	0x000000  	0
0x00E4	0x000000  	0
0x00E6	0x000000  	0
0x00E8	0x000000  	0
0x00EA	0x000000  	0
0x00EC	0x000000  	0
0x00EE	0x000000  	0
0x00F0	0x000000  	0
0x00F2	0x000000  	0
0x00F4	0x000000  	0
0x00F6	0x000000  	0
0x00F8	0x000000  	0
0x00FA	0x000000  	0
0x00FC	0x000000  	0
0x00FE	0x000000  	0
_main:
0x02FC	0x20808F  	MOV	#2056, W15
0x02FE	0x20FFF0  	MOV	#4095, W0
0x0300	0xB7A020  	MOV	WREG, SPLIM
0x0302	0x200000  	MOV	#0, W0
0x0304	0xB7A034  	MOV	WREG, PSVPAG
0x0306	0x200040  	MOV	#4, W0
0x0308	0xB72044  	IOR	CORCON
0x030A	0x0000000203A4  	CALL	932
;hola_mundo.c,106 :: 		int main() {
;hola_mundo.c,109 :: 		UART1_Init(9600);            // usa clock del proyecto
0x030E	0x781F8A  	PUSH	W10
0x0310	0x781F8B  	PUSH	W11
0x0312	0x22580A  	MOV	#9600, W10
0x0314	0x20000B  	MOV	#0, W11
0x0316	0x07FF94  	RCALL	_UART1_Init
;hola_mundo.c,110 :: 		Delay_ms(100);               // breve estabilización
0x0318	0x200028  	MOV	#2, W8
0x031A	0x245847  	MOV	#17796, W7
L_main8:
0x031C	0xED200E  	DEC	W7
0x031E	0x3AFFFE  	BRA NZ	L_main8
0x0320	0xED2010  	DEC	W8
0x0322	0x3AFFFC  	BRA NZ	L_main8
0x0324	0x000000  	NOP
0x0326	0x000000  	NOP
;hola_mundo.c,112 :: 		config_puertos();
0x0328	0x07FFCC  	RCALL	_config_puertos
;hola_mundo.c,113 :: 		config_timer2();
0x032A	0x07FF56  	RCALL	_config_timer2
;hola_mundo.c,116 :: 		config_adc();
0x032C	0x07FF65  	RCALL	_config_adc
;hola_mundo.c,118 :: 		IEC0bits.ADIE = 1;  // Habilitamos interrupción del A/D
0x032E	0xA8608D  	BSET	IEC0bits, #11
;hola_mundo.c,120 :: 		while (1) {
L_main10:
;hola_mundo.c,122 :: 		}
0x0330	0x37FFFF  	BRA	L_main10
;hola_mundo.c,125 :: 		}
L_end_main:
0x0332	0x7805CF  	POP	W11
0x0334	0x78054F  	POP	W10
L__main_end_loop:
0x0336	0x37FFFF  	BRA	L__main_end_loop
; end of _main
_UART1_Init:
0x0240	0xFA0008  	LNK	#8
;__Lib_UART_12_p30.c,121 :: 		
;__Lib_UART_12_p30.c,124 :: 		
0x0242	0x202320  	MOV	#lo_addr(_UART1_Write), W0
0x0244	0x884030  	MOV	W0, _UART_Wr_Ptr
;__Lib_UART_12_p30.c,125 :: 		
0x0246	0x2FFFF0  	MOV	#lo_addr(_UART1_Read), W0
0x0248	0x884010  	MOV	W0, _UART_Rd_Ptr
;__Lib_UART_12_p30.c,126 :: 		
0x024A	0x2FFFF0  	MOV	#lo_addr(_UART1_Data_Ready), W0
0x024C	0x884020  	MOV	W0, _UART_Rdy_Ptr
;__Lib_UART_12_p30.c,127 :: 		
0x024E	0x2FFFF0  	MOV	#lo_addr(_UART1_Tx_Idle), W0
0x0250	0x884000  	MOV	W0, _UART_Tx_Idle_Ptr
;__Lib_UART_12_p30.c,132 :: 		
0x0252	0xEF220C  	CLR	U1MODE
;__Lib_UART_12_p30.c,133 :: 		
0x0254	0x280000  	MOV	#32768, W0
0x0256	0xB7A20E  	MOV	WREG, U1STA
;__Lib_UART_12_p30.c,134 :: 		
0x0258	0x07FFBA  	RCALL	_Get_Fosc_kHz
;__Lib_UART_12_p30.c,137 :: 		
0x025A	0x203E82  	MOV	#1000, W2
0x025C	0x200003  	MOV	#0, W3
0x025E	0x07FF50  	RCALL	__Multiply_32x32
; tmp start address is: 8 (W4)
0x0260	0xBE0200  	MOV.D	W0, W4
;__Lib_UART_12_p30.c,140 :: 		
0x0262	0x07FFB8  	RCALL	_Get_Fosc_Per_Cyc
0x0264	0xDE0041  	LSR	W0, #1, W0
0x0266	0x400064  	ADD	W0, #4, W0
0x0268	0xBE010A  	MOV.D	W10, W2
L__UART1_Init61:
0x026A	0xE90000  	DEC	W0, W0
0x026C	0x350003  	BRA LT	L__UART1_Init62
0x026E	0xD00102  	SL	W2, W2
0x0270	0xD28183  	RLC	W3, W3
0x0272	0x37FFFB  	BRA	L__UART1_Init61
L__UART1_Init62:
0x0274	0x980702  	MOV	W2, [W14+0]
0x0276	0x980713  	MOV	W3, [W14+2]
;__Lib_UART_12_p30.c,142 :: 		
0x0278	0xBE9F84  	PUSH.D	W4
0x027A	0xBE0004  	MOV.D	W4, W0
0x027C	0xEB0200  	CLR	W4
0x027E	0x07FF7B  	RCALL	__Modulus_32x32
0x0280	0xBE024F  	POP.D	W4
0x0282	0x980720  	MOV	W0, [W14+4]
0x0284	0x980731  	MOV	W1, [W14+6]
;__Lib_UART_12_p30.c,143 :: 		
0x0286	0xBE0004  	MOV.D	W4, W0
0x0288	0x90010E  	MOV	[W14+0], W2
0x028A	0x90019E  	MOV	[W14+2], W3
0x028C	0xEB0200  	CLR	W4
0x028E	0x07FF4A  	RCALL	__Divide_32x32
; tmp end address is: 8 (W4)
; tmp start address is: 6 (W3)
0x0290	0x780180  	MOV	W0, W3
0x0292	0x780201  	MOV	W1, W4
;__Lib_UART_12_p30.c,145 :: 		
0x0294	0x470060  	ADD	W14, #0, W0
0x0296	0xD10150  	LSR	[++W0], W2
0x0298	0xD380C0  	RRC	[--W0], W1
0x029A	0x470064  	ADD	W14, #4, W0
0x029C	0xE10830  	CP	W1, [W0++]
0x029E	0xE19020  	CPB	W2, [W0--]
0x02A0	0x310004  	BRA GEU	L__UART1_Init42
L__UART1_Init63:
;__Lib_UART_12_p30.c,146 :: 		
; tmp start address is: 0 (W0)
0x02A2	0x418061  	ADD	W3, #1, W0
0x02A4	0x4A00E0  	ADDC	W4, #0, W1
; tmp end address is: 6 (W3)
0x02A6	0xBE0100  	MOV.D	W0, W2
; tmp end address is: 0 (W0)
0x02A8	0x370002  	BRA	L_UART1_Init13
L__UART1_Init42:
;__Lib_UART_12_p30.c,145 :: 		
0x02AA	0x780103  	MOV	W3, W2
0x02AC	0x780184  	MOV	W4, W3
;__Lib_UART_12_p30.c,146 :: 		
L_UART1_Init13:
;__Lib_UART_12_p30.c,150 :: 		
; tmp start address is: 4 (W2)
0x02AE	0x510061  	SUB	W2, #1, W0
0x02B0	0x5980E0  	SUBB	W3, #0, W1
; tmp end address is: 4 (W2)
0x02B2	0x8810A0  	MOV	W0, U1BRG
;__Lib_UART_12_p30.c,151 :: 		
0x02B4	0xA9220E  	BCLR.B	U1STA, #1
;__Lib_UART_12_p30.c,153 :: 		
0x02B6	0xA8E20D  	BSET	U1MODE, #15
;__Lib_UART_12_p30.c,154 :: 		
0x02B8	0xA8420F  	BSET	U1STA, #10
;__Lib_UART_12_p30.c,155 :: 		
0x02BA	0x07FF2B  	RCALL	_Delay_100ms
0x02BC	0x07FF2A  	RCALL	_Delay_100ms
;__Lib_UART_12_p30.c,157 :: 		
L_end_UART1_Init:
0x02BE	0xFA8000  	ULNK
0x02C0	0x060000  	RETURN
; end of _UART1_Init
_Get_Fosc_kHz:
;__Lib_Delays.c,38 :: 		unsigned long Get_Fosc_kHz() {
;__Lib_Delays.c,39 :: 		return Clock_kHz();
0x01CE	0x227100  	MOV	#10000, W0
0x01D0	0x200001  	MOV	#0, W1
;__Lib_Delays.c,40 :: 		}
L_end_Get_Fosc_kHz:
0x01D2	0x060000  	RETURN
; end of _Get_Fosc_kHz
_Get_Fosc_Per_Cyc:
;__Lib_Delays.c,63 :: 		unsigned int Get_Fosc_Per_Cyc() {
;__Lib_Delays.c,64 :: 		return __FOSC_PER_CYC;
0x01D4	0x200040  	MOV	#4, W0
;__Lib_Delays.c,65 :: 		}
L_end_Get_Fosc_Per_Cyc:
0x01D6	0x060000  	RETURN
; end of _Get_Fosc_Per_Cyc
_Delay_100ms:
;__Lib_Delays.c,666 :: 		void Delay_100ms()
;__Lib_Delays.c,668 :: 		Delay_ms(100);
0x0112	0x200028  	MOV	#2, W8
0x0114	0x245847  	MOV	#17796, W7
L_Delay_100ms31:
0x0116	0xED200E  	DEC	W7
0x0118	0x3AFFFE  	BRA NZ	L_Delay_100ms31
0x011A	0xED2010  	DEC	W8
0x011C	0x3AFFFC  	BRA NZ	L_Delay_100ms31
0x011E	0x000000  	NOP
0x0120	0x000000  	NOP
;__Lib_Delays.c,669 :: 		}
L_end_Delay_100ms:
0x0122	0x060000  	RETURN
; end of _Delay_100ms
__Multiply_32x32:
0x0100	0xFA0000  	LNK	#0
;__Lib_Math.c,43 :: 		
;__Lib_Math.c,46 :: 		
0x0102	0xB80A02  	MUL.UU	W1, W2, W4
;__Lib_Math.c,47 :: 		
0x0104	0x880050  	MOV	W0, W5
;__Lib_Math.c,48 :: 		
0x0106	0xB80002  	MUL.UU	W0, W2, W0
;__Lib_Math.c,49 :: 		
0x0108	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,50 :: 		
0x010A	0xB82A03  	MUL.UU	W5, W3, W4
;__Lib_Math.c,51 :: 		
0x010C	0x420081  	ADD	W4, W1, W1
;__Lib_Math.c,54 :: 		
L_end__Multiply_32x32:
0x010E	0xFA8000  	ULNK
0x0110	0x060000  	RETURN
; end of __Multiply_32x32
__Modulus_32x32:
0x0176	0xFA0000  	LNK	#0
;__Lib_Math.c,162 :: 		
;__Lib_Math.c,164 :: 		
0x0178	0x070002  	RCALL	Modulus_32x32___testsus
;__Lib_Math.c,166 :: 		
0x017A	0x0000000401CA  	GOTO	the_end_Modulus_32x32
;__Lib_Math.c,171 :: 		
Modulus_32x32___testsus:
;__Lib_Math.c,172 :: 		
0x017E	0xE20008  	CP0	W4
;__Lib_Math.c,173 :: 		
0x0180	0x3A0002  	BRA NZ	Modulus_32x32___modsi3
;__Lib_Math.c,175 :: 		
0x0182	0x070010  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,176 :: 		
0x0184	0x060000  	RETURN
;__Lib_Math.c,178 :: 		
Modulus_32x32___modsi3:
;__Lib_Math.c,179 :: 		
0x0186	0x781F81  	MOV	W1, [W15++]
;__Lib_Math.c,180 :: 		
0x0188	0xE20002  	CP0	W1
;__Lib_Math.c,181 :: 		
0x018A	0x3D0002  	BRA GE	Modulus_32x32_modtestb
;__Lib_Math.c,182 :: 		
0x018C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,183 :: 		
0x018E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,184 :: 		
Modulus_32x32_modtestb:
;__Lib_Math.c,185 :: 		
0x0190	0xE20006  	CP0	W3
;__Lib_Math.c,186 :: 		
0x0192	0x3D0002  	BRA GE	Modulus_32x32_calcrem
;__Lib_Math.c,187 :: 		
0x0194	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,188 :: 		
0x0196	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,189 :: 		
Modulus_32x32_calcrem:
;__Lib_Math.c,190 :: 		
0x0198	0x070005  	RCALL	Modulus_32x32___umodsi3
;__Lib_Math.c,191 :: 		
0x019A	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,192 :: 		
0x019C	0x3B0002  	BRA NN	Modulus_32x32_exitr
;__Lib_Math.c,193 :: 		
0x019E	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,194 :: 		
0x01A0	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,195 :: 		
Modulus_32x32_exitr:
;__Lib_Math.c,196 :: 		
0x01A2	0x060000  	RETURN
;__Lib_Math.c,197 :: 		
Modulus_32x32___umodsi3:
;__Lib_Math.c,198 :: 		
0x01A4	0x070002  	RCALL	Modulus_32x32___udivsi3
;__Lib_Math.c,199 :: 		
0x01A6	0xBE8004  	MOV.D	W4, W0
;__Lib_Math.c,200 :: 		
0x01A8	0x060000  	RETURN
;__Lib_Math.c,201 :: 		
Modulus_32x32___udivsi3:
;__Lib_Math.c,202 :: 		
0x01AA	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,203 :: 		
0x01AC	0x200206  	MOV	#32, W6
;__Lib_Math.c,204 :: 		
Modulus_32x32_nextbit:
;__Lib_Math.c,205 :: 		
0x01AE	0xD00000  	SL	W0, W0
;__Lib_Math.c,206 :: 		
0x01B0	0xD28081  	RLC	W1, W1
;__Lib_Math.c,207 :: 		
0x01B2	0xD28204  	RLC	W4, W4
;__Lib_Math.c,208 :: 		
0x01B4	0xD28285  	RLC	W5, W5
;__Lib_Math.c,209 :: 		
0x01B6	0xA80000  	BSET	W0, #0
;__Lib_Math.c,210 :: 		
0x01B8	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,211 :: 		
0x01BA	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,212 :: 		
0x01BC	0x3B0003  	BRA NN	Modulus_32x32_iterate
;__Lib_Math.c,213 :: 		
0x01BE	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,214 :: 		
0x01C0	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,215 :: 		
0x01C2	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,216 :: 		
Modulus_32x32_iterate:
;__Lib_Math.c,217 :: 		
0x01C4	0xE90306  	DEC	W6, W6
;__Lib_Math.c,218 :: 		
0x01C6	0x3AFFF3  	BRA NZ	Modulus_32x32_nextbit
;__Lib_Math.c,219 :: 		
0x01C8	0x060000  	RETURN
;__Lib_Math.c,222 :: 		
the_end_Modulus_32x32:
;__Lib_Math.c,225 :: 		
L_end__Modulus_32x32:
0x01CA	0xFA8000  	ULNK
0x01CC	0x060000  	RETURN
; end of __Modulus_32x32
__Divide_32x32:
0x0124	0xFA0000  	LNK	#0
;__Lib_Math.c,78 :: 		
;__Lib_Math.c,81 :: 		
0x0126	0x070002  	RCALL	Divide_32x32___testsus
;__Lib_Math.c,83 :: 		
0x0128	0x000000040172  	GOTO	the_end_Divide_32x32
;__Lib_Math.c,88 :: 		
Divide_32x32___testsus:
;__Lib_Math.c,89 :: 		
0x012C	0xE20008  	CP0	W4
;__Lib_Math.c,90 :: 		
0x012E	0x3A0002  	BRA NZ	Divide_32x32___divsi3
;__Lib_Math.c,92 :: 		
0x0130	0x070010  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,93 :: 		
0x0132	0x060000  	RETURN
;__Lib_Math.c,95 :: 		
Divide_32x32___divsi3:
;__Lib_Math.c,96 :: 		
0x0134	0x689F83  	XOR	W1, W3, [W15++]
;__Lib_Math.c,97 :: 		
0x0136	0xE20002  	CP0	W1
;__Lib_Math.c,98 :: 		
0x0138	0x3D0002  	BRA GE	Divide_32x32_divtestb
;__Lib_Math.c,99 :: 		
0x013A	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,100 :: 		
0x013C	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,101 :: 		
Divide_32x32_divtestb:
;__Lib_Math.c,102 :: 		
0x013E	0xE20006  	CP0	W3
;__Lib_Math.c,103 :: 		
0x0140	0x3D0002  	BRA GE	Divide_32x32_calcquot
;__Lib_Math.c,104 :: 		
0x0142	0x110160  	SUBR	W2, #0, W2
;__Lib_Math.c,105 :: 		
0x0144	0x1981E0  	SUBBR	W3, #0, W3
;__Lib_Math.c,106 :: 		
Divide_32x32_calcquot:
;__Lib_Math.c,107 :: 		
0x0146	0x070005  	RCALL	Divide_32x32___udivsi3
;__Lib_Math.c,108 :: 		
0x0148	0xE0004F  	CP0	[--W15]
;__Lib_Math.c,109 :: 		
0x014A	0x3B0002  	BRA NN	Divide_32x32_returnq
;__Lib_Math.c,110 :: 		
0x014C	0x100060  	SUBR	W0, #0, W0
;__Lib_Math.c,111 :: 		
0x014E	0x1880E0  	SUBBR	W1, #0, W1
;__Lib_Math.c,112 :: 		
Divide_32x32_returnq:
;__Lib_Math.c,113 :: 		
0x0150	0x060000  	RETURN
;__Lib_Math.c,114 :: 		
Divide_32x32___udivsi3:
;__Lib_Math.c,115 :: 		
0x0152	0xB82260  	MUL.UU	W4, #0, W4
;__Lib_Math.c,116 :: 		
0x0154	0x200206  	MOV	#32, W6
;__Lib_Math.c,117 :: 		
Divide_32x32_nextbit:
;__Lib_Math.c,118 :: 		
0x0156	0xD00000  	SL	W0, W0
;__Lib_Math.c,119 :: 		
0x0158	0xD28081  	RLC	W1, W1
;__Lib_Math.c,120 :: 		
0x015A	0xD28204  	RLC	W4, W4
;__Lib_Math.c,121 :: 		
0x015C	0xD28285  	RLC	W5, W5
;__Lib_Math.c,122 :: 		
0x015E	0xA80000  	BSET	W0, #0
;__Lib_Math.c,123 :: 		
0x0160	0x520202  	SUB	W4, W2, W4
;__Lib_Math.c,124 :: 		
0x0162	0x5A8283  	SUBB	W5, W3, W5
;__Lib_Math.c,125 :: 		
0x0164	0x3B0003  	BRA NN	Divide_32x32_iterate
;__Lib_Math.c,126 :: 		
0x0166	0x420202  	ADD	W4, W2, W4
;__Lib_Math.c,127 :: 		
0x0168	0x4A8283  	ADDC	W5, W3, W5
;__Lib_Math.c,128 :: 		
0x016A	0xA10000  	BCLR	W0, #0
;__Lib_Math.c,129 :: 		
Divide_32x32_iterate:
;__Lib_Math.c,130 :: 		
0x016C	0xE90306  	DEC	W6, W6
;__Lib_Math.c,131 :: 		
0x016E	0x3AFFF3  	BRA NZ	Divide_32x32_nextbit
;__Lib_Math.c,132 :: 		
0x0170	0x060000  	RETURN
;__Lib_Math.c,135 :: 		
the_end_Divide_32x32:
;__Lib_Math.c,138 :: 		
L_end__Divide_32x32:
0x0172	0xFA8000  	ULNK
0x0174	0x060000  	RETURN
; end of __Divide_32x32
_config_puertos:
;hola_mundo.c,13 :: 		void config_puertos()  {
;hola_mundo.c,15 :: 		TRISBbits.TRISB0 = 0;
0x02C2	0xA902C6  	BCLR.B	TRISBbits, #0
;hola_mundo.c,17 :: 		TRISBbits.TRISB2 = 1;
0x02C4	0xA842C6  	BSET.B	TRISBbits, #2
;hola_mundo.c,18 :: 		TRISBbits.TRISB3 = 0;
0x02C6	0xA962C6  	BCLR.B	TRISBbits, #3
;hola_mundo.c,19 :: 		TRISBbits.TRISB4 = 0;
0x02C8	0xA982C6  	BCLR.B	TRISBbits, #4
;hola_mundo.c,20 :: 		TRISBbits.TRISB5 = 0;
0x02CA	0xA9A2C6  	BCLR.B	TRISBbits, #5
;hola_mundo.c,21 :: 		TRISBbits.TRISB6 = 0;
0x02CC	0xA9C2C6  	BCLR.B	TRISBbits, #6
;hola_mundo.c,22 :: 		TRISBbits.TRISB7 = 0;
0x02CE	0xA9E2C6  	BCLR.B	TRISBbits, #7
;hola_mundo.c,23 :: 		TRISBbits.TRISB8 = 0;
0x02D0	0xA902C7  	BCLR	TRISBbits, #8
;hola_mundo.c,24 :: 		TRISBbits.TRISB9 = 0;
0x02D2	0xA922C7  	BCLR	TRISBbits, #9
;hola_mundo.c,25 :: 		TRISBbits.TRISB10 = 0;
0x02D4	0xA942C7  	BCLR	TRISBbits, #10
;hola_mundo.c,26 :: 		}
L_end_config_puertos:
0x02D6	0x060000  	RETURN
; end of _config_puertos
_config_timer2:
;hola_mundo.c,30 :: 		void config_timer2()  {
;hola_mundo.c,32 :: 		T2CON = 0x0000;     // Timer apagado, configuración por defecto
0x01D8	0xEF2110  	CLR	T2CON
;hola_mundo.c,34 :: 		PR2 = 39062;         // Periodo del timer volver 2500
0x01DA	0x298960  	MOV	#39062, W0
0x01DC	0xB7A10C  	MOV	WREG, PR2
;hola_mundo.c,36 :: 		T2CONbits.TCKPS = 0b10;  // Prescaler 1:1 (0b00)   actual 1:64
0x01DE	0xB3C200  	MOV.B	#32, W0
0x01E0	0x784080  	MOV.B	W0, W1
0x01E2	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x01E4	0x68C090  	XOR.B	W1, [W0], W1
0x01E6	0xB3C300  	MOV.B	#48, W0
0x01E8	0x60C080  	AND.B	W1, W0, W1
0x01EA	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x01EC	0x68C090  	XOR.B	W1, [W0], W1
0x01EE	0x201100  	MOV	#lo_addr(T2CONbits), W0
0x01F0	0x784801  	MOV.B	W1, [W0]
;hola_mundo.c,37 :: 		T2CONbits.TON = 1;       // Encender Timer2
0x01F2	0xA8E111  	BSET	T2CONbits, #15
;hola_mundo.c,40 :: 		IEC0bits.T2IE = 1;       // Habilitar interrupción de Timer2
0x01F4	0xA8C08C  	BSET.B	IEC0bits, #6
;hola_mundo.c,41 :: 		}
L_end_config_timer2:
0x01F6	0x060000  	RETURN
; end of _config_timer2
_config_adc:
;hola_mundo.c,45 :: 		void config_adc()  {
;hola_mundo.c,46 :: 		ADPCFG = 0xFFFB; // Elije la entrada analógica a convertir en este caso AN2.
0x01F8	0x2FFFB0  	MOV	#65531, W0
0x01FA	0xB7A2A8  	MOV	WREG, ADPCFG
;hola_mundo.c,49 :: 		ADCON1bits.ADON = 0;  // ADC Apagado por ahora
0x01FC	0xA9E2A1  	BCLR	ADCON1bits, #15
;hola_mundo.c,50 :: 		ADCON1bits.ADSIDL = 1;  // No trabaja en modo idle
0x01FE	0xA8A2A1  	BSET	ADCON1bits, #13
;hola_mundo.c,51 :: 		ADCON1bits.FORM = 0b00;  // Formato de salida entero
0x0200	0x801501  	MOV	ADCON1bits, W1
0x0202	0x2FCFF0  	MOV	#64767, W0
0x0204	0x608000  	AND	W1, W0, W0
0x0206	0xB7A2A0  	MOV	WREG, ADCON1bits
;hola_mundo.c,53 :: 		ADCON1bits.SSRC = 0b000;
0x0208	0x202A00  	MOV	#lo_addr(ADCON1bits), W0
0x020A	0x784090  	MOV.B	[W0], W1
0x020C	0xB3C1F0  	MOV.B	#31, W0
0x020E	0x60C080  	AND.B	W1, W0, W1
0x0210	0x202A00  	MOV	#lo_addr(ADCON1bits), W0
0x0212	0x784801  	MOV.B	W1, [W0]
;hola_mundo.c,55 :: 		ADCON1bits.ASAM = 0;
0x0214	0xA942A0  	BCLR.B	ADCON1bits, #2
;hola_mundo.c,57 :: 		ADCON2bits.VCFG = 0b000;  // Referencia con AVdd y AVss
0x0216	0x801511  	MOV	ADCON2bits, W1
0x0218	0x21FFF0  	MOV	#8191, W0
0x021A	0x608000  	AND	W1, W0, W0
0x021C	0xB7A2A2  	MOV	WREG, ADCON2bits
;hola_mundo.c,58 :: 		ADCON2bits.SMPI = 0b0000;  // Lanza interrupción luego de tomar n muestras.
0x021E	0x202A20  	MOV	#lo_addr(ADCON2bits), W0
0x0220	0x784090  	MOV.B	[W0], W1
0x0222	0xB3CC30  	MOV.B	#195, W0
0x0224	0x60C080  	AND.B	W1, W0, W1
0x0226	0x202A20  	MOV	#lo_addr(ADCON2bits), W0
0x0228	0x784801  	MOV.B	W1, [W0]
;hola_mundo.c,64 :: 		ADCHS = 0b0010;
0x022A	0x200020  	MOV	#2, W0
0x022C	0xB7A2A6  	MOV	WREG, ADCHS
;hola_mundo.c,66 :: 		ADCON1bits.ADON = 1;// Habilitamos el A/D
0x022E	0xA8E2A1  	BSET	ADCON1bits, #15
;hola_mundo.c,67 :: 		}
L_end_config_adc:
0x0230	0x060000  	RETURN
; end of _config_adc
0x03A4	0x20800A  	MOV	#2048, W10
0x03A6	0x20000B  	MOV	#0, W11
0x03A8	0x090003  	REPEAT	#3
0x03AA	0x781D0B  	MOV	W11, [W10++]
0x03AC	0x060000  	RETURN
_interrupcionADC:
0x0338	0xF80034  	PUSH	PSVPAG
0x033A	0xF80036  	PUSH	RCOUNT
0x033C	0x781F80  	PUSH	W0
0x033E	0x200020  	MOV	#2, W0
0x0340	0x09000C  	REPEAT	#12
0x0342	0x781FB0  	PUSH	[W0++]
;hola_mundo.c,69 :: 		void interrupcionADC() org 0x002A {
;hola_mundo.c,70 :: 		unsigned int valorADC = ADCBUF0;
0x0344	0x781F8A  	PUSH	W10
; valorADC start address is: 2 (W1)
0x0346	0x801401  	MOV	ADCBUF0, W1
;hola_mundo.c,72 :: 		int nivel = valorADC / 512; // 4096 / 512 = 128 por nivel
0x0348	0xDE0849  	LSR	W1, #9, W0
; valorADC end address is: 2 (W1)
; nivel start address is: 2 (W1)
0x034A	0x780080  	MOV	W0, W1
;hola_mundo.c,73 :: 		LATBbits.LATB0 = !LATBbits.LATB0;
0x034C	0xAA02CA  	BTG	LATBbits, #0
;hola_mundo.c,76 :: 		LATBbits.LATB3 = 0;
0x034E	0xA962CA  	BCLR.B	LATBbits, #3
;hola_mundo.c,77 :: 		LATBbits.LATB4 = 0;
0x0350	0xA982CA  	BCLR.B	LATBbits, #4
;hola_mundo.c,78 :: 		LATBbits.LATB5 = 0;
0x0352	0xA9A2CA  	BCLR.B	LATBbits, #5
;hola_mundo.c,79 :: 		LATBbits.LATB6 = 0;
0x0354	0xA9C2CA  	BCLR.B	LATBbits, #6
;hola_mundo.c,80 :: 		LATBbits.LATB7 = 0;
0x0356	0xA9E2CA  	BCLR.B	LATBbits, #7
;hola_mundo.c,81 :: 		LATBbits.LATB8 = 0;
0x0358	0xA902CB  	BCLR	LATBbits, #8
;hola_mundo.c,82 :: 		LATBbits.LATB9 = 0;
0x035A	0xA922CB  	BCLR	LATBbits, #9
;hola_mundo.c,83 :: 		LATBbits.LATB10 = 0;
0x035C	0xA942CB  	BCLR	LATBbits, #10
;hola_mundo.c,86 :: 		if (nivel >= 1) LATBbits.LATB3 = 1;
0x035E	0xE10061  	CP	W0, #1
0x0360	0x350001  	BRA LT	L_interrupcionADC0
L__interrupcionADC17:
0x0362	0xA862CA  	BSET.B	LATBbits, #3
L_interrupcionADC0:
;hola_mundo.c,87 :: 		if (nivel >= 2) LATBbits.LATB4 = 1;
0x0364	0xE10862  	CP	W1, #2
0x0366	0x350001  	BRA LT	L_interrupcionADC1
L__interrupcionADC18:
0x0368	0xA882CA  	BSET.B	LATBbits, #4
L_interrupcionADC1:
;hola_mundo.c,88 :: 		if (nivel >= 3) LATBbits.LATB5 = 1;
0x036A	0xE10863  	CP	W1, #3
0x036C	0x350001  	BRA LT	L_interrupcionADC2
L__interrupcionADC19:
0x036E	0xA8A2CA  	BSET.B	LATBbits, #5
L_interrupcionADC2:
;hola_mundo.c,89 :: 		if (nivel >= 4) LATBbits.LATB6 = 1;
0x0370	0xE10864  	CP	W1, #4
0x0372	0x350001  	BRA LT	L_interrupcionADC3
L__interrupcionADC20:
0x0374	0xA8C2CA  	BSET.B	LATBbits, #6
L_interrupcionADC3:
;hola_mundo.c,90 :: 		if (nivel >= 5) LATBbits.LATB7 = 1;
0x0376	0xE10865  	CP	W1, #5
0x0378	0x350001  	BRA LT	L_interrupcionADC4
L__interrupcionADC21:
0x037A	0xA8E2CA  	BSET.B	LATBbits, #7
L_interrupcionADC4:
;hola_mundo.c,91 :: 		if (nivel >= 6) LATBbits.LATB8 = 1;
0x037C	0xE10866  	CP	W1, #6
0x037E	0x350001  	BRA LT	L_interrupcionADC5
L__interrupcionADC22:
0x0380	0xA802CB  	BSET	LATBbits, #8
L_interrupcionADC5:
;hola_mundo.c,92 :: 		if (nivel >= 7) LATBbits.LATB9 = 1;
0x0382	0xE10867  	CP	W1, #7
0x0384	0x350001  	BRA LT	L_interrupcionADC6
L__interrupcionADC23:
0x0386	0xA822CB  	BSET	LATBbits, #9
L_interrupcionADC6:
;hola_mundo.c,93 :: 		if (nivel >= 8) LATBbits.LATB10 = 1;
0x0388	0xE10868  	CP	W1, #8
0x038A	0x350001  	BRA LT	L_interrupcionADC7
L__interrupcionADC24:
0x038C	0xA842CB  	BSET	LATBbits, #10
L_interrupcionADC7:
;hola_mundo.c,95 :: 		IFS0bits.ADIF = 0; // Borrar bandera de interrupción ADC
0x038E	0xA96085  	BCLR	IFS0bits, #11
;hola_mundo.c,100 :: 		UART1_Write(nivel);
0x0390	0x780501  	MOV	W1, W10
; nivel end address is: 2 (W1)
0x0392	0x07FF4F  	RCALL	_UART1_Write
;hola_mundo.c,103 :: 		}
L_end_interrupcionADC:
0x0394	0x78054F  	POP	W10
0x0396	0x2001A0  	MOV	#26, W0
0x0398	0x09000C  	REPEAT	#12
0x039A	0x78104F  	POP	[W0--]
0x039C	0x78004F  	POP	W0
0x039E	0xF90036  	POP	RCOUNT
0x03A0	0xF90034  	POP	PSVPAG
0x03A2	0x064000  	RETFIE
; end of _interrupcionADC
_UART1_Write:
0x0232	0xFA0000  	LNK	#0
;__Lib_UART_12_p30.c,53 :: 		
;__Lib_UART_12_p30.c,54 :: 		
L_UART1_Write0:
0x0234	0xAF020F  	BTSC	U1STA, #8
0x0236	0x370001  	BRA	L_UART1_Write1
0x0238	0x37FFFD  	BRA	L_UART1_Write0
L_UART1_Write1:
;__Lib_UART_12_p30.c,55 :: 		
0x023A	0x88108A  	MOV	W10, U1TXREG
;__Lib_UART_12_p30.c,56 :: 		
L_end_UART1_Write:
0x023C	0xFA8000  	ULNK
0x023E	0x060000  	RETURN
; end of _UART1_Write
_detectarIntT2:
0x02D8	0xF80034  	PUSH	PSVPAG
0x02DA	0xF80036  	PUSH	RCOUNT
0x02DC	0x781F80  	PUSH	W0
0x02DE	0x200020  	MOV	#2, W0
0x02E0	0x09000C  	REPEAT	#12
0x02E2	0x781FB0  	PUSH	[W0++]
;hola_mundo.c,1 :: 		void detectarIntT2() org 0x0020  {
;hola_mundo.c,2 :: 		IFS0bits.T2IF = 0;  // Borrar bandera de interrupción T2
0x02E4	0xA9C084  	BCLR.B	IFS0bits, #6
;hola_mundo.c,4 :: 		ADCON1bits.DONE = 0;  // Antes de pedir una muestra ponemos en cero
0x02E6	0xA902A0  	BCLR.B	ADCON1bits, #0
;hola_mundo.c,5 :: 		ADCON1bits.SAMP = 1;  // Pedimos una muestra
0x02E8	0xA822A0  	BSET.B	ADCON1bits, #1
;hola_mundo.c,7 :: 		asm nop;
0x02EA	0x000000  	NOP
;hola_mundo.c,9 :: 		ADCON1bits.SAMP = 0;  // Pedimos que retenga la muestra
0x02EC	0xA922A0  	BCLR.B	ADCON1bits, #1
;hola_mundo.c,11 :: 		}
L_end_detectarIntT2:
0x02EE	0x2001A0  	MOV	#26, W0
0x02F0	0x09000C  	REPEAT	#12
0x02F2	0x78104F  	POP	[W0--]
0x02F4	0x78004F  	POP	W0
0x02F6	0xF90036  	POP	RCOUNT
0x02F8	0xF90034  	POP	PSVPAG
0x02FA	0x064000  	RETFIE
; end of _detectarIntT2
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0100      [18]    __Multiply_32x32
0x0112      [18]    _Delay_100ms
0x0124      [82]    __Divide_32x32
0x0176      [88]    __Modulus_32x32
0x01CE       [6]    _Get_Fosc_kHz
0x01D4       [4]    _Get_Fosc_Per_Cyc
0x01D8      [32]    _config_timer2
0x01F8      [58]    _config_adc
0x0232      [14]    _UART1_Write
0x0240     [130]    _UART1_Init
0x02C2      [22]    _config_puertos
0x02D8      [36]    _detectarIntT2
0x02FC      [60]    _main
0x0338     [108]    _interrupcionADC
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0800       [2]    _UART_Tx_Idle_Ptr
0x0802       [2]    _UART_Rd_Ptr
0x0804       [2]    _UART_Rdy_Ptr
0x0084       [2]    IFS0bits
0x0210       [2]    U1TXREG
0x02CA       [2]    LATBbits
0x0214       [2]    U1BRG
0x0280       [2]    ADCBUF0
0x0110       [2]    T2CONbits
0x008C       [2]    IEC0bits
0x010C       [2]    PR2
0x02C6       [2]    TRISBbits
0x0110       [2]    T2CON
0x02A6       [2]    ADCHS
0x0806       [2]    _UART_Wr_Ptr
0x02A2       [2]    ADCON2bits
0x02A8       [2]    ADPCFG
0x02A0       [2]    ADCON1bits
0x010C       [2]    PR2
0x0110       [2]    T2CON
0x020C       [2]    U1MODE
0x020E       [2]    U1STA
0x0210       [2]    U1TXREG
0x0214       [2]    U1BRG
0x0014       [2]    FARG_UART1_Write__data
0x0014       [4]    FARG_UART1_Init_baud_rate
0x0280       [2]    ADCBUF0
0x02A6       [2]    ADCHS
0x02A8       [2]    ADPCFG
