# -*- coding: utf-8 -*-
"""Ejericio7clase03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iKhVgj6LUqzIeJFATMCl6CJK48sLbf2i
"""



import matplotlib.pyplot as plt
import matplotlib.image as mpimg

img = mpimg.imread('/content/sync.png')
plt.imshow(img)
plt.axis('off') # Hide axes
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define the continuous sinc function
def sinc_continuous(x):
    # Handle the special case where x is 0
    return np.where(x == 0, 1, 8*np.sin(0.125*np.pi * x) / (0.125*np.pi * x))

# Generate a denser range of x values for a smoother curve
x_values_continuous = np.linspace(-32, 32, 500)

# Calculate y values using the continuous sinc function
y_values_continuous = sinc_continuous(x_values_continuous)

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x_values_continuous, y_values_continuous)
plt.xlabel('x')
plt.ylabel('sinc(x)')
plt.title('Continuous Sinc Function')
plt.grid(True)
plt.show()

import numpy as np
import matplotlib.pyplot as plt

# Define the continuous sinc function
def sinc_continuous(x):
    return np.where(x == 0, 8, 8 * np.sin(0.125 * np.pi * x) / (0.125 * np.pi * x))

# Generate a denser range of x values for a smoother curve
x_values_continuous = np.linspace(-33, 33, 500)
y_values_continuous = sinc_continuous(x_values_continuous)

# Define sampling parameters
sampling_interval = 1  # Interval between samples
x_values_sampled = np.arange(-33, 33, sampling_interval)
y_values_sampled = sinc_continuous(x_values_sampled)

# Create the plot
plt.figure(figsize=(10, 6))
plt.plot(x_values_continuous, y_values_continuous, label='Continuous Sinc')
plt.stem(x_values_sampled, y_values_sampled, linefmt='r-', markerfmt='ro', basefmt='r-', label='Sampled Sinc')
plt.xlabel('x')
plt.ylabel('sinc(x)')
plt.title('Continuous and Sampled Sinc Function')
plt.grid(True)
plt.legend()
plt.show()