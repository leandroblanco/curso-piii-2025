# -*- coding: utf-8 -*-
"""<Ejercicio6clase03.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17WnfaLR-AY9sZUe7zCfC2iBuyEOdKVmm

Ejercicio 6

Utilizando la notebook de Colab, grabe con el micrófono un tono de 440 Hz generado con algún generador online y también grabe la correspondiente nota con algún piano virtual.
Modifique el código para visualizar las dos grabaciones.
Compare los espectros de ambas grabaciones y realice algunos comentarios de lo que observa.
"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

from IPython.display import Audio

# Reemplaza "/content/tono440Hz.wav" con la ruta de tu archivo si es diferente
audio_file_path = "/content/tono440hz.wav"

try:
    display(Audio(audio_file_path))
except FileNotFoundError:
    print(f"Error: El archivo '{audio_file_path}' no fue encontrado.")
except Exception as e:
    print(f"Ocurrió un error al reproducir el archivo de audio: {e}")

import soundfile as sf
import matplotlib.pyplot as plt
import numpy as np

# Reemplaza "nombre_de_tu_archivo.wav" con el nombre real de tu archivo
audio_file_path = "/content/tono440Hz.wav"

try:
    # Cargar el archivo de audio
    data, samplerate = sf.read(audio_file_path)

    # Si el audio es estéreo, convertir a mono promediando los canales
    if len(data.shape) > 1:
        data = np.mean(data, axis=1)

    # Calcular el espectro de frecuencia usando FFT
    n = len(data)
    # Espectro de doble cara
    yf = np.fft.fft(data)
    # Frecuencias correspondientes al espectro
    xf = np.fft.fftfreq(n, 1 / samplerate)

    # Tomar solo el espectro de una cara (ignorando las frecuencias negativas)
    xf = xf[:n//2]
    yf = 2.0/n * np.abs(yf[0:n//2])

    # Visualizar el espectro
    plt.figure(figsize=(12, 4))
    plt.plot(xf, yf)
    plt.xlabel("Frecuencia [Hz]")
    plt.ylabel("Amplitud (Magnitud)")
    plt.title("Espectro de Frecuencia de la Grabación")
    plt.grid(True)
    # Limitar el eje x a un rango relevante para visualizar mejor
    plt.xlim([0, 5000]) # Puedes ajustar este límite según la frecuencia esperada
    plt.show()

except FileNotFoundError:
    print(f"Error: El archivo '{audio_file_path}' no fue encontrado. Asegúrate de haber subido el archivo y que el nombre sea correcto.")
except Exception as e:
    print(f"Ocurrió un error al cargar o procesar el archivo de audio: {e}")

"""Segunda parte: grabe la correspondiente nota con algún piano virtual. La nota musical que corresponde a 440 Hz en un piano es el La (A) en la octava central del piano"""

from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

from IPython.display import Audio

# Reemplaza "/content/tono440Hz.wav" con la ruta de tu archivo si es diferente
audio_file_path = "/content/pianoLA4.wav"

try:
    display(Audio(audio_file_path))
except FileNotFoundError:
    print(f"Error: El archivo '{audio_file_path}' no fue encontrado.")
except Exception as e:
    print(f"Ocurrió un error al reproducir el archivo de audio: {e}")

import soundfile as sf
import matplotlib.pyplot as plt
import numpy as np

# Reemplaza "nombre_de_tu_archivo.wav" con el nombre real de tu archivo
audio_file_path = "/content/pianoLA4.wav"

try:
    # Cargar el archivo de audio
    data, samplerate = sf.read(audio_file_path)

    # Si el audio es estéreo, convertir a mono promediando los canales
    if len(data.shape) > 1:
        data = np.mean(data, axis=1)

    # Calcular el espectro de frecuencia usando FFT
    n = len(data)
    # Espectro de doble cara
    yf = np.fft.fft(data)
    # Frecuencias correspondientes al espectro
    xf = np.fft.fftfreq(n, 1 / samplerate)

    # Tomar solo el espectro de una cara (ignorando las frecuencias negativas)
    xf = xf[:n//2]
    yf = 2.0/n * np.abs(yf[0:n//2])

    # Visualizar el espectro
    plt.figure(figsize=(12, 4))
    plt.plot(xf, yf)
    plt.xlabel("Frecuencia [Hz]")
    plt.ylabel("Amplitud (Magnitud)")
    plt.title("Espectro de Frecuencia de la Grabación")
    plt.grid(True)
    # Limitar el eje x a un rango relevante para visualizar mejor
    plt.xlim([0, 5000]) # Puedes ajustar este límite según la frecuencia esperada
    plt.show()

except FileNotFoundError:
    print(f"Error: El archivo '{audio_file_path}' no fue encontrado. Asegúrate de haber subido el archivo y que el nombre sea correcto.")
except Exception as e:
    print(f"Ocurrió un error al cargar o procesar el archivo de audio: {e}")